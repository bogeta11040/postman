{
	"info": {
		"_postman_id": "37b84619-ae8d-4d5f-a314-2709f8e4d06f",
		"name": "Data driven testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20888059"
	},
	"item": [
		{
			"name": "pronadjiKnjigu",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"const schema = {",
							"  \"type\": \"array\",",
							"  \"items\": [",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"book_name\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"isbn\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"aisle\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"author\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"book_name\",",
							"        \"isbn\",",
							"        \"aisle\",",
							"        \"author\"",
							"      ]",
							"    }",
							"  ]",
							"};",
							"",
							"pm.test(\"Validate JSON response\", function() {",
							"    pm.expect(jsonData[0].author).to.eql(pm.collectionVariables.get(\"author\"))",
							"})",
							"",
							"pm.test(\"Validate JSON response schema\", function() {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.have.jsonSchema(schema);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/Library/GetBook.php?ID={{stored_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"Library",
						"GetBook.php"
					],
					"query": [
						{
							"key": "ID",
							"value": "{{stored_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "dodajKnjigu",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"const bookId = jsonData.ID;",
							"",
							"pm.test(\"Validate Status Code is 200\", function() {",
							"    pm.response.to.have.status(200);",
							"    pm.expect(jsonData).have.property(\"Msg\");",
							"    pm.expect(jsonData.Msg).to.eql(\"successfully added\")",
							"})",
							"",
							"pm.test(\"Validate headers cookie response time\", function() {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json;charset=UTF-8\");",
							"    pm.expect(pm.response.responseTime).to.be.below(1200);",
							"    pm.expect(pm.response.text()).to.include(\"successfully added\");",
							"})",
							"",
							"pm.test(\"Validate ID\", function() {",
							"    const isbn = pm.collectionVariables.get(\"isbn\");",
							"    let req = JSON.parse(pm.request.body.raw);",
							"    const expectedId = isbn + req.aisle;",
							"    pm.expect(expectedId).to.eql(bookId)",
							"})",
							"pm.collectionVariables.set(\"stored_id\", bookId)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const code = pm.globals.get(\"companyCode\");",
							"const randomNum = pm.variables.replaceIn(\"{{$randomInt}}\");",
							"pm.collectionVariables.set(\"isbn\", code+randomNum);",
							"pm.collectionVariables.set(\"author\", pm.iterationData.get(\"Autor\"));",
							"pm.collectionVariables.set(\"name\", pm.iterationData.get(\"Naslov\"));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\"name\":\"{{name}}\",\n\"isbn\":\"{{isbn}}\",\n\"aisle\":\"128\",\n\"author\":\"{{author}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/Library/Addbook.php",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"Library",
						"Addbook.php"
					]
				}
			},
			"response": []
		},
		{
			"name": "izbrisiKnjigu",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Validate JSON response schema\", function () {",
							"    pm.response.to.have.status(200);",
							"//    pm.expect(jsonData.msg).to.eql(\"book is successfully deleted\");",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n \n\"ID\" : \"{{stored_id}}\"\n \n}Â ",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/Library/DeleteBook.php",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"Library",
						"DeleteBook.php"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "isbn",
			"value": "",
			"type": "string"
		},
		{
			"key": "stored_id",
			"value": ""
		},
		{
			"key": "author",
			"value": "",
			"type": "string"
		},
		{
			"key": "name",
			"value": "",
			"type": "string"
		},
		{
			"key": "flag",
			"value": "false",
			"type": "string"
		}
	]
}